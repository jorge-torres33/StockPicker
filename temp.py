# The Stock class is designed to hold all the attributes
# for each stock 
class Stock:
    def __init__(self, name, price, m1, m6, y1, y5, ratio):
        self.name = name
        self.price = price
        self.m1 = m1
        self.m6 = m6
        self.y1 = y1
        self.y5 = y5
        self.ratio = ratio

# Parses through csv file, returning a list from
# the second line foward.         
def read_csv(filename):
    ret = []
    with open(filename) as f:
        for sequences in f:
            ret.append(sequences.strip().split(","))
    return ret[1:]

# Uses a list of all the items in the csv file and the selected 
# projection by the user. The functions creates a list containing 
# all stocks, their atributes, and calculates the earnings ratio
def create_stocks(csv, projection):
    ratio = 0
    stocks = []
    for line in csv:
        if projection == "1m":
            ratio = float(line[2]) / float(line[1])
        elif projection == "6m":
            ratio = float(line[3]) / float(line[1])
        elif projection == "1y":
            ratio = float(line[4]) / float(line[1])
        elif projection == "5y":
            ratio = float(line[5]) / float(line[1])
            
        stock = Stock(line[0], line[1], line[2], line[3], line[4], line[5], ratio)
        stocks.append(stock)
        
    return stocks

# Creates a heap that is filled with tuples of the inverse ratio
# and the current stock. By storing the inverse ratio, we can access
# the highest profit stock by popping the stock from the heap.
def create_heap(stocks):
    import heapq as pq
    heap = []
    for stock in stocks:
        pq.heappush(heap,(-stock.ratio, stock))
    return heap

# Function uses the user's budget and the heap generated by create_heap.
# pops out the highest value stocks until budget is less than or equal to 1
def generate_results(budget, heap):
    import heapq as pq
    result = []
    while round(budget) > 1:
        curr,object = pq.heappop(heap)
        if budget >= float(object.price):
            result.append(object.name)
            budget -= float(object.price)
        else:
            fraction = round(budget / float(object.price),2)
            budget -= float(object.price) * fraction
            result.append(str(fraction) + " " + object.name)
            
    return result
     

if __name__ == "__main__":
    from sys import argv
    if len(argv) > 1:
        sequences = read_csv(argv[1])
        stocks = create_stocks(sequences, argv[3])
        heap = create_heap(stocks)
        results = generate_results(float(argv[2]), heap)
        print(results)