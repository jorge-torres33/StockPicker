"""
Author: Jorge A. Torres Muniz
Description: This project's main purpose is to select from a list of provided stocks
             based on the amount to invest and the specified timeframe for the rate
             of return for the stock.
"""

class Stock:
    """
    Constructor initializes Stock objects from a list of stock data imported from a CSV file.
    
    Args:
        name (str): name of the company
        price (float): price for 1 stock
        m1 (str): Estimated Projection after 1 month
        m6 (str): Estimated Projection after 5 months
        y1 (str): Estimated Projection after 1 year
        y5 (str): Estimated Projection after 5 years
        ratio (float): Profit-to-Weight Ratio (selected projection / stock price)
    """
    def __init__(self, name, price, m1, m6, y1, y5, ratio):
        self.name = name
        self.price = price
        self.m1 = m1
        self.m6 = m6
        self.y1 = y1
        self.y5 = y5
        self.ratio = ratio

def read_csv(filename):
    """
    Parses a CSV file and returns a list containing all the stocks & their data.
    
    Args:
        filename (str): The name of the CSV file provided by the user.

    Returns:
        list: A list containing all the stock & their information.
    """
    ret = []
    with open(filename) as f:
        for sequences in f:
            ret.append(sequences.strip().split(","))
    return ret[1:]

def create_stocks(csv, projection):
    """
    Creates Stock objects and stores them in a list.

    Args:
    csv (list): A list containing all the stocks from a CSV file.
    projection (str): The selected projection by the user

    Returns:
        list: A list of Stock objects.
    """
    ratio = 0
    stocks = []
    for line in csv:
        if projection == "1m":
            ratio = float(line[2]) / float(line[1])
        elif projection == "6m":
            ratio = float(line[3]) / float(line[1])
        elif projection == "1y":
            ratio = float(line[4]) / float(line[1])
        elif projection == "5y":
            ratio = float(line[5]) / float(line[1])
            
        stock = Stock(line[0], line[1], line[2], line[3], line[4], line[5], ratio)
        stocks.append(stock)
        
    return stocks

def create_heap(stocks):
    """
    Creates a heap by storing tuples of inverse ratios and their corresponding stocks.
    Storing the inverse ratio allows efficient retrieval of the highest
    profit stock by popping it from the heap.

    Args:
        stocks (list): A list containing Stock objects.

    Returns:
        heap: The constructed heap of Stocks.
    """
    import heapq as pq
    heap = []
    for stock in stocks:
        pq.heappush(heap,(-stock.ratio, stock))
    return heap

def generate_results(budget, heap):
    """
    This function uses the user's budget and the heap generated by the 
    create_heap function to select the highest value stocks. It continues 
    to pop out the highest value stocks until the budget is less than 1.

    Args:
        budget (float): The user provided budget.
        heap (heap): The heap of Stock objects.

    Returns:
        list: A list containing strings with the names of purchased stocks
        and the corresponding amounts bought.
    """
    import heapq as pq
    result = []
    while round(budget) > 1:
        _,object = pq.heappop(heap)
        if budget >= float(object.price):
            result.append(object.name)
            budget -= float(object.price)
        else:
            fraction = round(budget / float(object.price),2)
            budget -= float(object.price) * fraction
            result.append(str(fraction) + " " + object.name)
            
    return result
     
# Check if the script is being run as the main program
if __name__ == "__main__":
    from sys import argv
    if len(argv) > 1:    # Check if command-line arguments were provided
        sequences = read_csv(argv[1])
        stocks = create_stocks(sequences, argv[3])
        heap = create_heap(stocks)
        results = generate_results(float(argv[2]), heap)
        print(results)